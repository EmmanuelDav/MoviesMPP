plugins {
    id 'kotlin-multiplatform' version '1.3.30'
}
repositories {
    google()
    jcenter()
    mavenCentral()
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'de.moviesmpp'
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    
    packagingOptions {
        // Ktor prevents the build otherwise
        exclude 'META-INF/*.kotlin_module'
    }
    
    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }
    
    sourceSets {
        main {
            // per default MPP names the Android module "main" - not sure how to change this, so we need to tell
            // Gradle where to find the Android code
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/java']
            res.srcDirs = ['src/androidMain/res']
        }
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
//    iosX64("ios") {
//        compilations.main.outputKinds("framework")
//    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')

                // HTTP
                implementation "io.ktor:ktor-client-core:1.1.4"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.0"
            }
        }
        commonTest {
            dependencies {
        		implementation kotlin('test-common')
        		implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')

                // HTTP
                implementation "io.ktor:ktor-client-android:1.1.4"
                implementation "io.ktor:ktor-client-okhttp:1.1.4"
                implementation "com.squareup.okhttp3:logging-interceptor:3.14.1"

                // Coroutines
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.0'
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
//        iosMain {
//        }
//        iosTest {
//        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
//task copyFramework {
//    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
//    def target = project.findProperty('kotlin.target') ?: 'ios'
//    dependsOn kotlin.targets."$target".compilations.main.linkTaskName('FRAMEWORK', buildType)
//
//    doLast {
//        def srcFile = kotlin.targets."$target".compilations.main.getBinary('FRAMEWORK', buildType)
//        def targetDir = getProperty('configuration.build.dir')
//        copy {
//            from srcFile.parent
//            into targetDir
//            include 'app.framework/**'
//            include 'app.framework.dSYM'
//        }
//    }
//}